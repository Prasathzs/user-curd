// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	models "zopsmart/Task/models"

	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// DeletebyId mocks base method.
func (m *MockServices) DeletebyId(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletebyId", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletebyId indicates an expected call of DeletebyId.
func (mr *MockServicesMockRecorder) DeletebyId(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletebyId", reflect.TypeOf((*MockServices)(nil).DeletebyId), Id)
}

// GetAllUsersService mocks base method.
func (m *MockServices) GetAllUsersService() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersService")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersService indicates an expected call of GetAllUsersService.
func (mr *MockServicesMockRecorder) GetAllUsersService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersService", reflect.TypeOf((*MockServices)(nil).GetAllUsersService))
}

// GetUserById mocks base method.
func (m *MockServices) GetUserById(Id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", Id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockServicesMockRecorder) GetUserById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockServices)(nil).GetUserById), Id)
}

// UpdatebyId mocks base method.
func (m *MockServices) UpdatebyId(Id int, Phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatebyId", Id, Phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatebyId indicates an expected call of UpdatebyId.
func (mr *MockServicesMockRecorder) UpdatebyId(Id, Phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatebyId", reflect.TypeOf((*MockServices)(nil).UpdatebyId), Id, Phone)
}

// ValidateEmail mocks base method.
func (m *MockServices) ValidateEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEmail indicates an expected call of ValidateEmail.
func (mr *MockServicesMockRecorder) ValidateEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEmail", reflect.TypeOf((*MockServices)(nil).ValidateEmail), email)
}

// ValidateId mocks base method.
func (m *MockServices) ValidateId(Id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateId", Id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateId indicates an expected call of ValidateId.
func (mr *MockServicesMockRecorder) ValidateId(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateId", reflect.TypeOf((*MockServices)(nil).ValidateId), Id)
}
